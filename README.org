#+TITLE: Iz's DOOM Emacs Config
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, emacs, doom-emacs, readme, elisp, izder
#+LANGUAGE: en

+ Intended for use with *DOOM Emacs*.

+ Mainly for personal backups, but if you want 'em, use 'em!

+ /I won't provide support for any issues on your machine, as this is a pet project./

-----

* DISCLAIMER:

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/

-----

* Giegue!

#+html: <p align="center"><img width=300 src="giegue.png" /></p>

* Code Structure

** [[init.el][=init.el=]]

this is the package delcaration of DOOM Emacs Native packages

#+BEGIN_SRC  elisp :tangle init.el
(doom! :input
       ;;bidi                 ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout               ; auie,ctsrnm is the superior home row

       :completion
       company                ; the ultimate code completion backend
       ;;helm                 ; the *other* search engine for love and life
       ;;ido                  ; the other *other* search engine...
       ivy                    ; a search engine for love and life
       ;;vertico              ; the search engine of the future

       :ui
       ;;deft                 ; notational velocity for Emacs
       doom                   ; what makes DOOM look the way it does
       doom-dashboard         ; a nifty splash screen for Emacs
       doom-quit              ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)       ; ðŸ™‚
       hl-todo                ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides          ; highlighted indent columns
       ligatures              ; ligatures and symbols to make your code pretty again
       minimap                ; show a map of the code on the side
       modeline               ; snazzy, Atom-inspired modeline, plus API
       nav-flash              ; blink cursor line after big motions
       neotree                ; a project drawer, like NERDTree for vim
       ophints                ; highlight the region an operation acts on
       (popup +defaults)      ; tame sudden yet inevitable temporary windows
       ;; tabs                ; a tab bar for Emacs
       ;; treemacs            ; a project drawer, like neotree but cooler
       ;; unicode             ; extended unicode support for various languages
       ;; (vc-gutter +pretty) ; vcs diff in the fringe
       ;; vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       window-select          ; visually switch windows
       ;; workspaces          ; tab emulation, persistence & separate workspaces
       ;; zen                 ; distraction-free coding or writing

       :editor
       (evil +everywhere)     ; come to the dark side, we have cookies
       file-templates         ; auto-snippets for empty files
       fold                   ; (nigh) universal code folding
       ;;(format +onsave)     ; automated prettiness
       ;;god                  ; run Emacs commands without modifier keys
       ;;lispy                ; vim for lisp, for people who don't like vim
       ;;multiple-cursors     ; editing in many places at once
       ;;objed                ; text object editing for the innocent
       ;;parinfer             ; turn lisp into python, sort of
       rotate-text            ; cycle region at point between text candidates
       ;;snippets             ; my elves. They type so I don't have to
       word-wrap              ; soft wrapping with language-aware indent

       :emacs
       dired                  ; making dired pretty [functional]
       electric               ; smarter, keyword-based electric-indent
       ibuffer                ; interactive buffer management
       undo                   ; persistent, smarter undo for your inevitable mistakes
       ;;vc                   ; version-control and Emacs, sitting in a tree

       :term
       eshell                 ; the elisp shell that works everywhere
       ;;shell                ; simple shell REPL for Emacs
       term                   ; basic terminal emulator for Emacs
       vterm                  ; the best terminal emulation in Emacs

       :checkers
       syntax                 ; tasing you for every semicolon you forget
       (spell +flyspell)      ; tasing you for misspelling mispelling
       grammar                ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio               ; Writes a PhD for you (citation needed)
       ;;collab               ; buffers with friends
       ;;debugger             ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       editorconfig           ; let someone else argue about tabs vs spaces
       ;;ein                  ; tame Jupyter notebooks with emacs
       (eval +overlay)        ; run code, run (also, repls)
       gist                   ; interacting with github gists
       lookup                 ; navigate your code and its documentation
       lsp                    ; M-x vscode
       ;;magit                ; a git porcelain for Emacs
       make                   ; run make tasks from Emacs
       pass                   ; password manager for nerds
       pdf                    ; pdf enhancements
       ;;prodigy              ; FIXME managing external services & code builders
       rgb                    ; creating color strings
       ;;taskrunner           ; taskrunner for all your projects
       ;;terraform            ; infrastructure as code
       ;;tmux                 ; an API for interacting with tmux
       tree-sitter            ; syntax and parsing, sitting in a tree...
       ;;upload               ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)     ; improve compatibility with macOS
       tty                    ; improve the terminal Emacs experience

       :lang
       ;;agda                 ; types of types of types of types...
       ;;beancount            ; mind the GAAP
       (cc +lsp)              ; C > C++ == 1
       (clojure +lsp)         ; java with a lisp
       common-lisp            ; if you've seen one lisp, you've seen them all
       ;;coq                  ; proofs-as-programs
       ;;(crystal +lsp)       ; ruby at the speed of c
       ;;csharp               ; unity, .NET, and mono shenanigans
       data                   ; config/data formats
       ;;(dart +flutter)      ; paint ui and not much else
       ;;dhall
       ;;elixir               ; erlang done right
       ;;elm                  ; care for a cup of TEA?
       emacs-lisp             ; drown in parentheses
       ;;erlang               ; an elegant language for a more civilized age
       ;;ess                  ; emacs speaks statistics
       ;;factor
       ;;faust                ; dsp, but you get to keep your soul
       ;;fortran              ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp               ; ML stands for Microsoft's Language
       ;;fstar                ; (dependent) types and (monadic) effects and Z3
       ;;gdscript             ; the language you waited for
       ;;(go +lsp)            ; the hipster dialect
       ;;(graphql +lsp)       ; Give queries a REST
       ;;(haskell +lsp)       ; a language that's lazier than I am
       ;;hy                   ; readability of scheme w/ speed of python
       ;;idris                ; a language you can depend on
       (json +lsp)            ; At least it ain't XML
       ;;(java +lsp)          ; the poster child for carpal tunnel syndrome
       ;;(javascript +lsp)    ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia                ; a better, faster MATLAB
       ;;kotlin               ; a better, slicker Java(Script)
       ;;latex                ; writing papers in Emacs has never been so fun
       ;;lean                 ; for folks with too much to prove
       ;;ledger               ; be audit you can be
       ;;(lua +lsp)           ; one-based indices? one-based indices
       ;;markdown             ; writing docs for people to ignore
       ;;(nim +lsp)           ; python + lisp at the speed of c
       ;;nix                  ; I hereby declare "nix geht mehr!"
       ;;ocaml                ; an objective camel
       org                    ; organize your plain life in plain text
       (php +lsp)             ; perl's insecure younger brother
       ;;plantuml             ; diagrams for confusing people more
       ;;(purescript +lsp)    ; javascript, but functional
       (python +lsp)          ; beautiful is better than ugly
       ;;qt                   ; the 'cutest' gui framework ever
       ;;(racket +lsp)        ; a DSL for DSLs
       ;;(raku +lsp)          ; the artist formerly known as perl6
       ;;rest                 ; Emacs as a REST client
       ;;rst                  ; ReST in peace
       (ruby +lsp)            ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)          ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala                ; java, but good
       (scheme +chicken +lsp) ; a fully conniving family of lisps
       (sh +lsp)              ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity             ; do you need a blockchain? No.
       ;;swift                ; who asked for emoji variables?
       ;;terra                ; Earth and Moon in alignment for performance.
       ;;(web +lsp)           ; the tubes
       (yaml +lsp)            ; JSON, but readable
       ;;(zig +lsp)           ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere          ; *leave* Emacs!? You must be joking
       ;;irc                 ; how neckbeards socialize
       ;;(rss +org)          ; emacs as an RSS reader
       ;;twitter             ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+END_SRC

** [[config.el][=config.el=]]

These are my configs for theme coloring, fonts, and anything else that i didn't like that came vanilla

*** CONFIGURE-FACES

#+BEGIN_SRC elisp :tangle config.el

(setq doom-font (font-spec :family "Spleen" :size 16 :weight 'Regular)
      doom-variable-pitch-font (font-spec :family "Spleen" :size 16 :weight 'Regular))
(setq doom-theme 'doom-gruvbox)

(setq fancy-splash-image (concat doom-user-dir "giegue.png"))

(custom-set-faces!
  '(doom-dashboard-banner :foreground "#EBDBB2" :background "#282828" :weight bold)
  '(doom-dashboard-footer :inherit font-lock-constant-face)
  '(doom-dashboard-footer-icon :inherit nerd-icons-red)
  '(doom-dashboard-loaded :inherit font-lock-warning-face)
  '(doom-dashboard-menu-desc :inherit font-lock-string-face)
  '(doom-dashboard-menu-title :inherit font-lock-function-name-face))

(custom-set-faces!
  '(mode-line :family "Spleen" :size 12 :height 0.9)
  '(mode-line-inactive :family "Spleen" :size 12 :height 0.9))

#+END_SRC

*** LANGUAGE-SPECIFIC

#+BEGIN_SRC elisp :tangle config.el
;; Org-mode
(setq org-directory "~/Documents")

;; Perl
(require 'cperl-mode)
(fset 'perl-mode 'cperl-mode)
(setq cperl-invalid-face nil)
(setq cperl-indent-parens-as-block t)
(setq cperl-close-paren-offset (- cperl-indent-level))
(add-hook 'cperl-mode-hook 'flycheck-mode)

;; Clojure
(add-hook 'clojure-mode-hook #'cider-jack-in)

;; Chicken Scheme
(setq scheme-program-name "chicken-csi -c:")
(setq display-line-numbers-type t)
(add-hook 'scheme-mode-hook #'geiser-mode--maybe-activate)

;; Shell Debugging
(require 'shx)
(add-hook 'shell-mode-hook 'shx-mode)
(require 'shell-pop)
(setq shell-pop-autocd-to-working-dir t)
(global-set-key (kbd "M-SPC") 'shell-pop)

#+END_SRC

*** AUTOSTARTS

#+BEGIN_SRC elisp :tangle config.el
;; XClip
(xclip-mode 1)

;; Mouse Support
(xterm-mouse-mode 1)

;; Rainbow
(rainbow-delimiters-mode)
#+END_SRC

*** IDE-FEATURES

#+BEGIN_SRC elisp :tangle config.el
;; Neotree
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(after! doom-themes
  (setq doom-neotree-enable-variable-pitch t))
(map! :leader
      :desc "Toggle neotree file viewer" "t n" #'neotree-toggle
      :desc "Open directory in neotree"  "d n" #'neotree-dir)

;; ORG-mode
(require 'org-auto-tangle)
(add-hook 'org-mode-hook 'org-auto-tangle-mode)

;; Minimap Binds
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap-mode" "m" #'minimap-mode))
#+END_SRC

** [[packages.el][=packages.el=]]

This is for my Non-Native Overrides.
These pull from MELPA, so ~(package! example-melpa)~, would install =example-melpa= on each doom sync.

#+BEGIN_SRC elisp :tangle packages.el
(package! dired-hacks-utils)
(package! ripgrep)
(package! projectile)
(package! projectile-ripgrep)
(package! sly-quicklisp)
(package! evil-tutor)
(package! elcord)
(package! ivy-rich)
(package! org-auto-tangle)
(package! password-store)
(package! shell-pop)
(package! shx)
#+END_SRC
